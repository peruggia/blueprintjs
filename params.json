{"name":"BlueprintJS","tagline":"Treat generic objects with \"class\"","body":"### What does it do?\r\nIf you work with a lot of generic objects (`{}`) in your code and you want to give special behavior to some or all of them, then BlueprintJS is the right tool for you.\r\n\r\n### Creating a Blueprint\r\n```javascript\r\nvar User = blueprint({\r\n    name: \"\",\r\n    lastName: \"\",\r\n    fullName: function () {\r\n        \"use strict\";\r\n        // Never use this.name, always use the \"get\" and \"set\" methods\r\n        return this.get(\"name\") + \" \" + this.get(\"lastName\");\r\n    }\r\n});\r\n```\r\n\r\n### Using the `User` Blueprint\r\n```javascript\r\nvar someObjectIHaveInMyProject = {name: \"Robert\", lastName: \"Baratheon\"};\r\n\r\nvar user = new User(someObjectIHaveInMyProject);\r\n\r\n// Now you get the \"fullName\" method for free!\r\nconsole.log(user.get(\"fullName\")); // Robert Baratheon\r\n```\r\n\r\n### Casting a list of objects\r\n```javascript\r\nvar listOfObjects = [\r\n    {name:\"John\", lastName: \"Blue\"},\r\n    {name:\"Mary\", lastName: \"Red\"},\r\n    {name:\"Richard\", lastName: \"Green\"},\r\n    {name:\"Michael\", lastName: \"Gray\"},\r\n    {name:\"Agatha\", lastName: \"Orange\"}\r\n];\r\n\r\n// blueprint.cast(Blueprint, object_or_list_of_objects)\r\nvar listOfUsers = blueprint.cast(User, listOfObjects);\r\n\r\nconsole.log(listOfUsers[1].get(\"fullName\")); // Mary Red\r\n```\r\n\r\n### The special **init** method\r\n```javascript\r\nvar Car = blueprint({\r\n    init: function () {\r\n        this.set(\"model\", \"BMW\"); // It will replace the default model\r\n    },\r\n    model: \"Mercedes Benz\"\r\n});\r\n\r\n// The object is created and the \"init()\" method is called\r\nvar car = new Car();\r\n\r\nconsole.log(car.get(\"model\")); // BMW\r\n```\r\n\r\n> That's it. Any feedback will be appreciated.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}